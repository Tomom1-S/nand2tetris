// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static int base;    // RAM上のスクリーンの基点
    static boolean color;
    static int height;  // スクリーンの高さ
    static int width;   // スクリーンの幅
    // 長さ16の配列、それぞれの要素がi番目のビットのみ1となっている数
    static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
      var int i;

      let base = 16384;
      let height = 256;
      let width = 512;
      let twoToThe = Array.new(16);  // 16bit
      let twoToThe[i] = 1;
      let i = 1;
      while (i < 16) {
        let twoToThe[i] = twoToThe[i - 1] + twoToThe[i - 1];
        let i = i + 1;
      }

      do Screen.clearScreen();
      return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
      var int x, y;

      let color = false;  // white
      let x = 0;
      let y = 0;
      while (y < height) {
        while (x < width) {
          do Screen.drawPixel(x, y);
          let x = x + 1;
        }
        let y = y + 1;
        let x = 0;
      }
      let color = true;  // black
      return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
      let color = b;
      return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
      var int word, value, tgt, colorBit;

      if (~Screen.isValidPoint(x, y)) {
        do Sys.error(7);  // 不適切な座標にドットを描画
      }

      let word = base + Math.multiply(32, y) + Math.divide(x, 16);
      let value = Memory.peek(word);
      let tgt = x - (16 * Math.divide(x, 16));
      let colorBit = twoToThe[tgt];
      if (color) {  // 黒にするときはOR
        let value = value | colorBit;
      } else {  // 白にするときはAND
        let colorBit = ~colorBit;
        let value = value & colorBit;
      }
      do Memory.poke(word, value);
      return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
      var int dx, dy, a, b, stepA, stepB, diff;

      if (~Screen.isValidPoint(x1, y1) | ~Screen.isValidPoint(x2, y2)) {
        do Sys.error(8);  // 不適切な座標にラインを描画
      }

      let dx = x2 - x1;
      let dy = y2 - y1;

      // 直線がx軸/y軸に平行なとき
      if (dx = 0) {
        do Screen.drawVerticalLine(x1, y1, y2);
        return;
      }
      if (dy = 0) {
        do Screen.drawHorizontalLine(y1, x1, x2);
        return;
      }

      // 直線がx軸/y軸に平行でないとき
      let a = 0;
      let b = 0;
      if (x1 < x2) {  // 引きたい直線は右向き(+方向)か左向き(-方向)か
        let stepA = 1;
      } else {
        let stepA = -1;
      }
      if (y1 < y2) {  // 引きたい直線は下向き(+方向)か上向き(-方向)か
        let stepB = 1;
      } else {
        let stepB = -1;
      }
      while (~(Math.abs(a) > Math.abs(dx)) & ~(Math.abs(b) > Math.abs(dy))) {
        do Screen.drawPixel(x1 + a, y1 + b);
        let diff = Math.abs(a * dy) - Math.abs(b * dx);
        if (diff > 0) {   // 引いた直線の傾きが目的とする傾きよりも小さいとき
          let b = b + stepB;  // 傾きを大きくする
        } else {
          let a = a + stepA;
        }
      }
      return;
    }

    /** Draws a horizontal line from pixel (x1,y) to pixel (x2,y), using the current color. */
    function void drawHorizontalLine(int y, int x1, int x2) {
      var int x, end;

      if (x1 < x2) {
        let x = x1;
        let end = x2;
      } else {
        let x = x2;
        let end = x1;
      }
      while (~(x > end)) {
        do Screen.drawPixel(x, y);
        let x = x + 1;
      }
      return;
    }

    /** Draws a vertical line from pixel (x,y1) to pixel (x,y2), using the current color. */
    function void drawVerticalLine(int x, int y1, int y2) {
      var int y, end;

      if (y1 < y2) {
        let y = y1;
        let end = y2;
      } else {
        let y = y2;
        let end = y1;
      }
      while (~(y > end)) {
        do Screen.drawPixel(x, y);
        let y = y + 1;
      }
      return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
      var int y, endY;

      if (~Screen.isValidPoint(x1, y1) | ~Screen.isValidPoint(x2, y2)) {
        do Sys.error(9);  // 不適切な座標に矩形を描画
      }

      if (y1 < y2) {
        let y = y1;
        let endY = y2;
      } else {
        let y = y2;
        let endY = y1;
      }
      while (~(y > endY)) {
        do Screen.drawLine(x1, y, x2, y);
        let y = y + 1;
      }
      return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
      var int dx, dy;

      if (~Screen.isValidPoint(x, y)) {
        do Sys.error(10);  // 円の中心が不適切
      }
      if (r > 181) {
        do Sys.error(11);  // 円の半径が不適切
      }

      let dy = -r;
      while (~(dy > r)) {
        let dx = Math.sqrt((r * r) - (dy * dy));
        do Screen.drawLine(x - dx, y + dy, x + dx, y + dy);
        let dy = dy + 1;
      }
      return;
    }

    /** Retuens whether the point(x, y) is on the Screen or not */
    function boolean isValidPoint(int x, int y) {
      if ((x < 0) | ~(x < width) | (y < 0) | ~(y < height)) {
        return false;
      }
      return true;
    }
}
